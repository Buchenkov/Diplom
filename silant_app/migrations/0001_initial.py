# Generated by Django 5.1.4 on 2024-12-08 16:21

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('address', models.CharField(default='Не указан', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='FailureNode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='RecoveryMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='ServiceCompany',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('address', models.CharField(default='Не указан', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='TypeTo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('guest', 'Гость'), ('client', 'Клиент'), ('service', 'Сервисная организация'), ('manager', 'Менеджер')], default='guest', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Machine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
                ('engine_model', models.CharField(max_length=100)),
                ('engine_serial_number', models.CharField(max_length=100)),
                ('transmission_model', models.CharField(max_length=100)),
                ('transmission_serial_number', models.CharField(max_length=100)),
                ('drive_axle_model', models.CharField(max_length=100)),
                ('drive_axle_serial_number', models.CharField(max_length=100)),
                ('steer_axle_model', models.CharField(max_length=100)),
                ('steer_axle_serial_number', models.CharField(max_length=100)),
                ('supply_contract', models.CharField(blank=True, max_length=100, null=True)),
                ('shipment_date', models.DateField(blank=True, null=True)),
                ('end_user', models.CharField(blank=True, max_length=100, null=True)),
                ('supply_address', models.CharField(blank=True, max_length=255, null=True)),
                ('configuration', models.CharField(blank=True, max_length=255, null=True)),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='silant_app.client')),
                ('service_company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='silant_app.servicecompany')),
            ],
        ),
        migrations.CreateModel(
            name='Reclamation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('failure_date', models.DateField()),
                ('operating_hours', models.IntegerField()),
                ('description', models.TextField()),
                ('spare_parts', models.TextField()),
                ('restoration_date', models.DateField()),
                ('downtime', models.IntegerField()),
                ('failure_node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='silant_app.failurenode')),
                ('machine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='silant_app.machine')),
                ('recovery_method', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='silant_app.recoverymethod')),
            ],
        ),
        migrations.CreateModel(
            name='Maintenance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('operating_hours', models.IntegerField()),
                ('order_number', models.CharField(max_length=100)),
                ('order_date', models.DateField()),
                ('machine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='silant_app.machine')),
                ('service_company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='silant_app.servicecompany')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='silant_app.typeto')),
            ],
        ),
    ]
